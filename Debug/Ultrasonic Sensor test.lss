
Ultrasonic Sensor test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000626  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000626  0000069a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e3  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000239  00000000  00000000  0000107f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000491  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  0000174c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000241  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000034c  00000000  00000000  00001a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001da9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  7a:	0c 94 11 03 	jmp	0x622	; 0x622 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_CMND>:
void LCD_SET_CURSER(unsigned char y, unsigned char x)
{
	if(y==1)
	LCD_CMND(0x7F+x);
	else if(y==2)
	LCD_CMND(0xBF+x);
  82:	9b b3       	in	r25, 0x1b	; 27
  84:	28 2f       	mov	r18, r24
  86:	20 7f       	andi	r18, 0xF0	; 240
  88:	9f 70       	andi	r25, 0x0F	; 15
  8a:	92 2b       	or	r25, r18
  8c:	9b bb       	out	0x1b, r25	; 27
  8e:	da 98       	cbi	0x1b, 2	; 27
  90:	db 9a       	sbi	0x1b, 3	; 27
  92:	ef ea       	ldi	r30, 0xAF	; 175
  94:	f4 e0       	ldi	r31, 0x04	; 4
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <LCD_CMND+0x14>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <LCD_CMND+0x1a>
  9c:	00 00       	nop
  9e:	db 98       	cbi	0x1b, 3	; 27
  a0:	ef ec       	ldi	r30, 0xCF	; 207
  a2:	f7 e0       	ldi	r31, 0x07	; 7
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_CMND+0x22>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <LCD_CMND+0x28>
  aa:	00 00       	nop
  ac:	2b b3       	in	r18, 0x1b	; 27
  ae:	f0 e1       	ldi	r31, 0x10	; 16
  b0:	8f 9f       	mul	r24, r31
  b2:	c0 01       	movw	r24, r0
  b4:	11 24       	eor	r1, r1
  b6:	92 2f       	mov	r25, r18
  b8:	9f 70       	andi	r25, 0x0F	; 15
  ba:	89 2b       	or	r24, r25
  bc:	8b bb       	out	0x1b, r24	; 27
  be:	db 9a       	sbi	0x1b, 3	; 27
  c0:	8f ea       	ldi	r24, 0xAF	; 175
  c2:	94 e0       	ldi	r25, 0x04	; 4
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <LCD_CMND+0x42>
  c8:	00 c0       	rjmp	.+0      	; 0xca <LCD_CMND+0x48>
  ca:	00 00       	nop
  cc:	db 98       	cbi	0x1b, 3	; 27
  ce:	08 95       	ret

000000d0 <LCD_DATA>:
  d0:	9b b3       	in	r25, 0x1b	; 27
  d2:	28 2f       	mov	r18, r24
  d4:	20 7f       	andi	r18, 0xF0	; 240
  d6:	9f 70       	andi	r25, 0x0F	; 15
  d8:	92 2b       	or	r25, r18
  da:	9b bb       	out	0x1b, r25	; 27
  dc:	da 9a       	sbi	0x1b, 2	; 27
  de:	db 9a       	sbi	0x1b, 3	; 27
  e0:	ef ea       	ldi	r30, 0xAF	; 175
  e2:	f4 e0       	ldi	r31, 0x04	; 4
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_DATA+0x14>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_DATA+0x1a>
  ea:	00 00       	nop
  ec:	db 98       	cbi	0x1b, 3	; 27
  ee:	ef ec       	ldi	r30, 0xCF	; 207
  f0:	f7 e0       	ldi	r31, 0x07	; 7
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_DATA+0x22>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCD_DATA+0x28>
  f8:	00 00       	nop
  fa:	2b b3       	in	r18, 0x1b	; 27
  fc:	f0 e1       	ldi	r31, 0x10	; 16
  fe:	8f 9f       	mul	r24, r31
 100:	c0 01       	movw	r24, r0
 102:	11 24       	eor	r1, r1
 104:	92 2f       	mov	r25, r18
 106:	9f 70       	andi	r25, 0x0F	; 15
 108:	89 2b       	or	r24, r25
 10a:	8b bb       	out	0x1b, r24	; 27
 10c:	db 9a       	sbi	0x1b, 3	; 27
 10e:	8f ea       	ldi	r24, 0xAF	; 175
 110:	94 e0       	ldi	r25, 0x04	; 4
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_DATA+0x42>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_DATA+0x48>
 118:	00 00       	nop
 11a:	db 98       	cbi	0x1b, 3	; 27
 11c:	08 95       	ret

0000011e <LCD_INITIALIZE>:
 11e:	8c ef       	ldi	r24, 0xFC	; 252
 120:	8a bb       	out	0x1a, r24	; 26
 122:	db 98       	cbi	0x1b, 3	; 27
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	83 ec       	ldi	r24, 0xC3	; 195
 128:	99 e0       	ldi	r25, 0x09	; 9
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <LCD_INITIALIZE+0xc>
 132:	00 c0       	rjmp	.+0      	; 0x134 <LCD_INITIALIZE+0x16>
 134:	00 00       	nop
 136:	83 e3       	ldi	r24, 0x33	; 51
 138:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CMND>
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	89 ef       	ldi	r24, 0xF9	; 249
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <LCD_INITIALIZE+0x24>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCD_INITIALIZE+0x2e>
 14c:	00 00       	nop
 14e:	82 e3       	ldi	r24, 0x32	; 50
 150:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CMND>
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	89 ef       	ldi	r24, 0xF9	; 249
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <LCD_INITIALIZE+0x3c>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LCD_INITIALIZE+0x46>
 164:	00 00       	nop
 166:	88 e2       	ldi	r24, 0x28	; 40
 168:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CMND>
 16c:	2f ef       	ldi	r18, 0xFF	; 255
 16e:	89 ef       	ldi	r24, 0xF9	; 249
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <LCD_INITIALIZE+0x54>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <LCD_INITIALIZE+0x5e>
 17c:	00 00       	nop
 17e:	8c e0       	ldi	r24, 0x0C	; 12
 180:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CMND>
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	89 ef       	ldi	r24, 0xF9	; 249
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <LCD_INITIALIZE+0x6c>
 192:	00 c0       	rjmp	.+0      	; 0x194 <LCD_INITIALIZE+0x76>
 194:	00 00       	nop
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CMND>
 19c:	2f ef       	ldi	r18, 0xFF	; 255
 19e:	89 ef       	ldi	r24, 0xF9	; 249
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <LCD_INITIALIZE+0x84>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_INITIALIZE+0x8e>
 1ac:	00 00       	nop
 1ae:	08 95       	ret

000001b0 <LCD_CLEAR>:
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CMND>
 1b6:	8f e3       	ldi	r24, 0x3F	; 63
 1b8:	9f e1       	ldi	r25, 0x1F	; 31
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCD_CLEAR+0xa>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <LCD_CLEAR+0x10>
 1c0:	00 00       	nop
 1c2:	08 95       	ret

000001c4 <LCD_PRINT>:
 1c4:	0f 93       	push	r16
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	fc 01       	movw	r30, r24
 1cc:	80 81       	ld	r24, Z
 1ce:	88 23       	and	r24, r24
 1d0:	79 f0       	breq	.+30     	; 0x1f0 <LCD_PRINT+0x2c>
 1d2:	8f 01       	movw	r16, r30
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
 1d6:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_DATA>
 1da:	cf 5f       	subi	r28, 0xFF	; 255
 1dc:	85 e3       	ldi	r24, 0x35	; 53
 1de:	8a 95       	dec	r24
 1e0:	f1 f7       	brne	.-4      	; 0x1de <LCD_PRINT+0x1a>
 1e2:	00 00       	nop
 1e4:	f8 01       	movw	r30, r16
 1e6:	ec 0f       	add	r30, r28
 1e8:	f1 1d       	adc	r31, r1
 1ea:	80 81       	ld	r24, Z
 1ec:	81 11       	cpse	r24, r1
 1ee:	f3 cf       	rjmp	.-26     	; 0x1d6 <LCD_PRINT+0x12>
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
 1f6:	08 95       	ret

000001f8 <LCD_NUM>:
}
void LCD_NUM(unsigned char num)
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	d8 2f       	mov	r29, r24
	LCD_DATA(num/10 + 0x30);
 1fe:	cd ec       	ldi	r28, 0xCD	; 205
 200:	8c 9f       	mul	r24, r28
 202:	c1 2d       	mov	r28, r1
 204:	11 24       	eor	r1, r1
 206:	c6 95       	lsr	r28
 208:	c6 95       	lsr	r28
 20a:	c6 95       	lsr	r28
 20c:	80 e3       	ldi	r24, 0x30	; 48
 20e:	8c 0f       	add	r24, r28
 210:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_DATA>
	LCD_DATA(num%10 + 0x30);
 214:	cc 0f       	add	r28, r28
 216:	8c 2f       	mov	r24, r28
 218:	88 0f       	add	r24, r24
 21a:	88 0f       	add	r24, r24
 21c:	c8 0f       	add	r28, r24
 21e:	8d 2f       	mov	r24, r29
 220:	8c 1b       	sub	r24, r28
 222:	80 5d       	subi	r24, 0xD0	; 208
 224:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_DATA>
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <getPulseWidth>:
      uint32_t i,result;

       //Wait for the rising edge
       for(i=0;i<600000;i++)
       {
          if(!(US_PIN & (1<<US_POS_0))) continue; else break;
 22e:	b0 99       	sbic	0x16, 0	; 22
 230:	18 c0       	rjmp	.+48     	; 0x262 <getPulseWidth+0x34>
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	a0 e0       	ldi	r26, 0x00	; 0
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	b0 99       	sbic	0x16, 0	; 22
 23c:	0d c0       	rjmp	.+26     	; 0x258 <getPulseWidth+0x2a>
uint16_t getPulseWidth()
{
      uint32_t i,result;

       //Wait for the rising edge
       for(i=0;i<600000;i++)
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	a1 1d       	adc	r26, r1
 242:	b1 1d       	adc	r27, r1
 244:	80 3c       	cpi	r24, 0xC0	; 192
 246:	27 e2       	ldi	r18, 0x27	; 39
 248:	92 07       	cpc	r25, r18
 24a:	29 e0       	ldi	r18, 0x09	; 9
 24c:	a2 07       	cpc	r26, r18
 24e:	b1 05       	cpc	r27, r1
 250:	a1 f7       	brne	.-24     	; 0x23a <getPulseWidth+0xc>
       {
          if(!(US_PIN & (1<<US_POS_0))) continue; else break;
       }

       if(i==600000)
          return 0xffff; //Indicates time out
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	9f ef       	ldi	r25, 0xFF	; 255
 256:	08 95       	ret
       for(i=0;i<600000;i++)
       {
          if(!(US_PIN & (1<<US_POS_0))) continue; else break;
       }

       if(i==600000)
 258:	80 3c       	cpi	r24, 0xC0	; 192
 25a:	97 42       	sbci	r25, 0x27	; 39
 25c:	a9 40       	sbci	r26, 0x09	; 9
 25e:	b1 05       	cpc	r27, r1
 260:	c9 f1       	breq	.+114    	; 0x2d4 <getPulseWidth+0xa6>
          return 0xffff; //Indicates time out

       //High Edge Found

       //Setup Timer1
       TCCR1A=0X00;
 262:	1f bc       	out	0x2f, r1	; 47
       TCCR1B=(1<<CS11); //Prescaler = Fcpu/8
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	8e bd       	out	0x2e, r24	; 46
       TCNT1=0x00;       //Init counter
 268:	1d bc       	out	0x2d, r1	; 45
 26a:	1c bc       	out	0x2c, r1	; 44

       //Now wait for the falling edge
       for(i=0;i<600000;i++)
       {
          if(US_PIN & (1<<US_POS_0))
 26c:	b0 9b       	sbis	0x16, 0	; 22
 26e:	22 c0       	rjmp	.+68     	; 0x2b4 <getPulseWidth+0x86>
          {
             if(TCNT1 > 60000) break; else continue;
 270:	8c b5       	in	r24, 0x2c	; 44
 272:	9d b5       	in	r25, 0x2d	; 45
 274:	81 36       	cpi	r24, 0x61	; 97
 276:	9a 4e       	sbci	r25, 0xEA	; 234
 278:	e8 f4       	brcc	.+58     	; 0x2b4 <getPulseWidth+0x86>
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	a0 e0       	ldi	r26, 0x00	; 0
 280:	b0 e0       	ldi	r27, 0x00	; 0
       TCNT1=0x00;       //Init counter

       //Now wait for the falling edge
       for(i=0;i<600000;i++)
       {
          if(US_PIN & (1<<US_POS_0))
 282:	b0 9b       	sbis	0x16, 0	; 22
 284:	12 c0       	rjmp	.+36     	; 0x2aa <getPulseWidth+0x7c>
          {
             if(TCNT1 > 60000) break; else continue;
 286:	2c b5       	in	r18, 0x2c	; 44
 288:	3d b5       	in	r19, 0x2d	; 45
 28a:	21 36       	cpi	r18, 0x61	; 97
 28c:	3a 4e       	sbci	r19, 0xEA	; 234
 28e:	68 f4       	brcc	.+26     	; 0x2aa <getPulseWidth+0x7c>
       TCCR1A=0X00;
       TCCR1B=(1<<CS11); //Prescaler = Fcpu/8
       TCNT1=0x00;       //Init counter

       //Now wait for the falling edge
       for(i=0;i<600000;i++)
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	a1 1d       	adc	r26, r1
 294:	b1 1d       	adc	r27, r1
 296:	80 3c       	cpi	r24, 0xC0	; 192
 298:	27 e2       	ldi	r18, 0x27	; 39
 29a:	92 07       	cpc	r25, r18
 29c:	29 e0       	ldi	r18, 0x09	; 9
 29e:	a2 07       	cpc	r26, r18
 2a0:	b1 05       	cpc	r27, r1
 2a2:	79 f7       	brne	.-34     	; 0x282 <getPulseWidth+0x54>
          else
             break;
       }

       if(i==600000)
         return 0xffff; //Indicates time out
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	9f ef       	ldi	r25, 0xFF	; 255
 2a8:	08 95       	ret
          }
          else
             break;
       }

       if(i==600000)
 2aa:	80 3c       	cpi	r24, 0xC0	; 192
 2ac:	97 42       	sbci	r25, 0x27	; 39
 2ae:	a9 40       	sbci	r26, 0x09	; 9
 2b0:	b1 05       	cpc	r27, r1
 2b2:	99 f0       	breq	.+38     	; 0x2da <getPulseWidth+0xac>
         return 0xffff; //Indicates time out

       //Falling edge found

       result=TCNT1;
 2b4:	8c b5       	in	r24, 0x2c	; 44
 2b6:	9d b5       	in	r25, 0x2d	; 45
 2b8:	a0 e0       	ldi	r26, 0x00	; 0
 2ba:	b0 e0       	ldi	r27, 0x00	; 0

       //Stop Timer
       TCCR1B=0x00;
 2bc:	1e bc       	out	0x2e, r1	; 46

       if(result > 60000)
 2be:	81 36       	cpi	r24, 0x61	; 97
 2c0:	2a ee       	ldi	r18, 0xEA	; 234
 2c2:	92 07       	cpc	r25, r18
 2c4:	a1 05       	cpc	r26, r1
 2c6:	b1 05       	cpc	r27, r1
 2c8:	58 f4       	brcc	.+22     	; 0x2e0 <getPulseWidth+0xb2>
          return 0xfffe; //No obstacle
       else
          return (result>>1);
 2ca:	b6 95       	lsr	r27
 2cc:	a7 95       	ror	r26
 2ce:	97 95       	ror	r25
 2d0:	87 95       	ror	r24
 2d2:	08 95       	ret
       {
          if(!(US_PIN & (1<<US_POS_0))) continue; else break;
       }

       if(i==600000)
          return 0xffff; //Indicates time out
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	9f ef       	ldi	r25, 0xFF	; 255
 2d8:	08 95       	ret
          else
             break;
       }

       if(i==600000)
         return 0xffff; //Indicates time out
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	9f ef       	ldi	r25, 0xFF	; 255
 2de:	08 95       	ret

       //Stop Timer
       TCCR1B=0x00;

       if(result > 60000)
          return 0xfffe; //No obstacle
 2e0:	8e ef       	ldi	r24, 0xFE	; 254
 2e2:	9f ef       	ldi	r25, 0xFF	; 255
       else
          return (result>>1);
   }
 2e4:	08 95       	ret

000002e6 <Wait>:

    void Wait()
   {
 2e6:	8a e0       	ldi	r24, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	f9 01       	movw	r30, r18
 2ee:	31 97       	sbiw	r30, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <Wait+0x8>
 2f2:	81 50       	subi	r24, 0x01	; 1
      uint8_t i;
      for(i=0;i<10;i++)
 2f4:	d9 f7       	brne	.-10     	; 0x2ec <Wait+0x6>
         _delay_loop_2(0);
   }
 2f6:	08 95       	ret

000002f8 <main>:
   int main()
   {
      uint16_t r;

      Wait();
 2f8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Wait>

      //Initialize the LCD Module
      LCD_INITIALIZE();
 2fc:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_INITIALIZE>

      Wait();
 300:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Wait>

      LCD_CLEAR();
 304:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_CLEAR>
      LCD_PRINT("Ultra Sonic");
 308:	80 e6       	ldi	r24, 0x60	; 96
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_PRINT>
      LCD_SET_CURSER(0,1);
	  LCD_PRINT("Sensor Test");
 310:	8c e6       	ldi	r24, 0x6C	; 108
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_PRINT>

      Wait();
 318:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Wait>
      Wait();
 31c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Wait>
      Wait();
 320:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Wait>
      Wait();
 324:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Wait>
      Wait();
 328:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Wait>
      Wait();
 32c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Wait>

     LCD_CLEAR();
 330:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_CLEAR>

      while(1)
      {

         //Set Ultra Sonic Port as out
         US_DDR|=(1<<US_POS_1);
 334:	b9 9a       	sbi	0x17, 1	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 336:	85 e3       	ldi	r24, 0x35	; 53
 338:	8a 95       	dec	r24
 33a:	f1 f7       	brne	.-4      	; 0x338 <main+0x40>
 33c:	00 00       	nop

         _delay_us(10);

         //Give the US pin a 15us High Pulse
         US_PORT|=(1<<US_POS_1);   //High
 33e:	c1 9a       	sbi	0x18, 1	; 24
 340:	80 e5       	ldi	r24, 0x50	; 80
 342:	8a 95       	dec	r24
 344:	f1 f7       	brne	.-4      	; 0x342 <main+0x4a>

         _delay_us(15);

         US_PORT&=(~(1<<US_POS_1));//Low
 346:	c1 98       	cbi	0x18, 1	; 24
 348:	8a e6       	ldi	r24, 0x6A	; 106
 34a:	8a 95       	dec	r24
 34c:	f1 f7       	brne	.-4      	; 0x34a <main+0x52>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <main+0x58>

         _delay_us(20);

         //Now make the pin input
         US_DDR&=(~(1<<US_POS_0));
 350:	b8 98       	cbi	0x17, 0	; 23

         //Measure the width of pulse
         r=getPulseWidth();
 352:	0e 94 17 01 	call	0x22e	; 0x22e <getPulseWidth>
 356:	ec 01       	movw	r28, r24

         //Handle Errors
         if(r==US_ERROR)
 358:	cf 3f       	cpi	r28, 0xFF	; 255
 35a:	8f ef       	ldi	r24, 0xFF	; 255
 35c:	d8 07       	cpc	r29, r24
 35e:	39 f4       	brne	.+14     	; 0x36e <main+0x76>
         {
            LCD_CLEAR();
 360:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_CLEAR>
			LCD_PRINT("Error !");
 364:	88 e7       	ldi	r24, 0x78	; 120
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_PRINT>
 36c:	e3 cf       	rjmp	.-58     	; 0x334 <main+0x3c>
	     }
         else  if(r==US_NO_OBSTACLE)
 36e:	ce 3f       	cpi	r28, 0xFE	; 254
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	d8 07       	cpc	r29, r24
 374:	39 f4       	brne	.+14     	; 0x384 <main+0x8c>
         {
            LCD_CLEAR();
 376:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_CLEAR>
            LCD_PRINT("Clear !");
 37a:	80 e8       	ldi	r24, 0x80	; 128
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_PRINT>
 382:	d8 cf       	rjmp	.-80     	; 0x334 <main+0x3c>
         {

            int d;

            d=(r/58.0); //Convert to cm
            LCD_CLEAR();
 384:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_CLEAR>
         else
         {

            int d;

            d=(r/58.0); //Convert to cm
 388:	be 01       	movw	r22, r28
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 83 02 	call	0x506	; 0x506 <__floatunsisf>
 392:	20 e0       	ldi	r18, 0x00	; 0
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	48 e6       	ldi	r20, 0x68	; 104
 398:	52 e4       	ldi	r21, 0x42	; 66
 39a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__divsf3>
 39e:	0e 94 4d 02 	call	0x49a	; 0x49a <__fixsfsi>
 3a2:	86 2f       	mov	r24, r22
            LCD_CLEAR();
            LCD_NUM(d);
 3a4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_NUM>
            LCD_PRINT(" cm");
 3a8:	88 e8       	ldi	r24, 0x88	; 136
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_PRINT>

            Wait();
 3b0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Wait>
 3b4:	bf cf       	rjmp	.-130    	; 0x334 <main+0x3c>

000003b6 <__divsf3>:
 3b6:	0e 94 ef 01 	call	0x3de	; 0x3de <__divsf3x>
 3ba:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_round>
 3be:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__fp_pscB>
 3c2:	58 f0       	brcs	.+22     	; 0x3da <__divsf3+0x24>
 3c4:	0e 94 c9 02 	call	0x592	; 0x592 <__fp_pscA>
 3c8:	40 f0       	brcs	.+16     	; 0x3da <__divsf3+0x24>
 3ca:	29 f4       	brne	.+10     	; 0x3d6 <__divsf3+0x20>
 3cc:	5f 3f       	cpi	r21, 0xFF	; 255
 3ce:	29 f0       	breq	.+10     	; 0x3da <__divsf3+0x24>
 3d0:	0c 94 c0 02 	jmp	0x580	; 0x580 <__fp_inf>
 3d4:	51 11       	cpse	r21, r1
 3d6:	0c 94 0b 03 	jmp	0x616	; 0x616 <__fp_szero>
 3da:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__fp_nan>

000003de <__divsf3x>:
 3de:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__fp_split3>
 3e2:	68 f3       	brcs	.-38     	; 0x3be <__divsf3+0x8>

000003e4 <__divsf3_pse>:
 3e4:	99 23       	and	r25, r25
 3e6:	b1 f3       	breq	.-20     	; 0x3d4 <__divsf3+0x1e>
 3e8:	55 23       	and	r21, r21
 3ea:	91 f3       	breq	.-28     	; 0x3d0 <__divsf3+0x1a>
 3ec:	95 1b       	sub	r25, r21
 3ee:	55 0b       	sbc	r21, r21
 3f0:	bb 27       	eor	r27, r27
 3f2:	aa 27       	eor	r26, r26
 3f4:	62 17       	cp	r22, r18
 3f6:	73 07       	cpc	r23, r19
 3f8:	84 07       	cpc	r24, r20
 3fa:	38 f0       	brcs	.+14     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
 3fc:	9f 5f       	subi	r25, 0xFF	; 255
 3fe:	5f 4f       	sbci	r21, 0xFF	; 255
 400:	22 0f       	add	r18, r18
 402:	33 1f       	adc	r19, r19
 404:	44 1f       	adc	r20, r20
 406:	aa 1f       	adc	r26, r26
 408:	a9 f3       	breq	.-22     	; 0x3f4 <__divsf3_pse+0x10>
 40a:	35 d0       	rcall	.+106    	; 0x476 <__FUSE_REGION_LENGTH__+0x76>
 40c:	0e 2e       	mov	r0, r30
 40e:	3a f0       	brmi	.+14     	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
 410:	e0 e8       	ldi	r30, 0x80	; 128
 412:	32 d0       	rcall	.+100    	; 0x478 <__FUSE_REGION_LENGTH__+0x78>
 414:	91 50       	subi	r25, 0x01	; 1
 416:	50 40       	sbci	r21, 0x00	; 0
 418:	e6 95       	lsr	r30
 41a:	00 1c       	adc	r0, r0
 41c:	ca f7       	brpl	.-14     	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
 41e:	2b d0       	rcall	.+86     	; 0x476 <__FUSE_REGION_LENGTH__+0x76>
 420:	fe 2f       	mov	r31, r30
 422:	29 d0       	rcall	.+82     	; 0x476 <__FUSE_REGION_LENGTH__+0x76>
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	88 1f       	adc	r24, r24
 42a:	bb 1f       	adc	r27, r27
 42c:	26 17       	cp	r18, r22
 42e:	37 07       	cpc	r19, r23
 430:	48 07       	cpc	r20, r24
 432:	ab 07       	cpc	r26, r27
 434:	b0 e8       	ldi	r27, 0x80	; 128
 436:	09 f0       	breq	.+2      	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
 438:	bb 0b       	sbc	r27, r27
 43a:	80 2d       	mov	r24, r0
 43c:	bf 01       	movw	r22, r30
 43e:	ff 27       	eor	r31, r31
 440:	93 58       	subi	r25, 0x83	; 131
 442:	5f 4f       	sbci	r21, 0xFF	; 255
 444:	3a f0       	brmi	.+14     	; 0x454 <__FUSE_REGION_LENGTH__+0x54>
 446:	9e 3f       	cpi	r25, 0xFE	; 254
 448:	51 05       	cpc	r21, r1
 44a:	78 f0       	brcs	.+30     	; 0x46a <__FUSE_REGION_LENGTH__+0x6a>
 44c:	0c 94 c0 02 	jmp	0x580	; 0x580 <__fp_inf>
 450:	0c 94 0b 03 	jmp	0x616	; 0x616 <__fp_szero>
 454:	5f 3f       	cpi	r21, 0xFF	; 255
 456:	e4 f3       	brlt	.-8      	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
 458:	98 3e       	cpi	r25, 0xE8	; 232
 45a:	d4 f3       	brlt	.-12     	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
 45c:	86 95       	lsr	r24
 45e:	77 95       	ror	r23
 460:	67 95       	ror	r22
 462:	b7 95       	ror	r27
 464:	f7 95       	ror	r31
 466:	9f 5f       	subi	r25, 0xFF	; 255
 468:	c9 f7       	brne	.-14     	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
 46a:	88 0f       	add	r24, r24
 46c:	91 1d       	adc	r25, r1
 46e:	96 95       	lsr	r25
 470:	87 95       	ror	r24
 472:	97 f9       	bld	r25, 7
 474:	08 95       	ret
 476:	e1 e0       	ldi	r30, 0x01	; 1
 478:	66 0f       	add	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	88 1f       	adc	r24, r24
 47e:	bb 1f       	adc	r27, r27
 480:	62 17       	cp	r22, r18
 482:	73 07       	cpc	r23, r19
 484:	84 07       	cpc	r24, r20
 486:	ba 07       	cpc	r27, r26
 488:	20 f0       	brcs	.+8      	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
 48a:	62 1b       	sub	r22, r18
 48c:	73 0b       	sbc	r23, r19
 48e:	84 0b       	sbc	r24, r20
 490:	ba 0b       	sbc	r27, r26
 492:	ee 1f       	adc	r30, r30
 494:	88 f7       	brcc	.-30     	; 0x478 <__FUSE_REGION_LENGTH__+0x78>
 496:	e0 95       	com	r30
 498:	08 95       	ret

0000049a <__fixsfsi>:
 49a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__fixunssfsi>
 49e:	68 94       	set
 4a0:	b1 11       	cpse	r27, r1
 4a2:	0c 94 0b 03 	jmp	0x616	; 0x616 <__fp_szero>
 4a6:	08 95       	ret

000004a8 <__fixunssfsi>:
 4a8:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__fp_splitA>
 4ac:	88 f0       	brcs	.+34     	; 0x4d0 <__fixunssfsi+0x28>
 4ae:	9f 57       	subi	r25, 0x7F	; 127
 4b0:	98 f0       	brcs	.+38     	; 0x4d8 <__fixunssfsi+0x30>
 4b2:	b9 2f       	mov	r27, r25
 4b4:	99 27       	eor	r25, r25
 4b6:	b7 51       	subi	r27, 0x17	; 23
 4b8:	b0 f0       	brcs	.+44     	; 0x4e6 <__fixunssfsi+0x3e>
 4ba:	e1 f0       	breq	.+56     	; 0x4f4 <__fixunssfsi+0x4c>
 4bc:	66 0f       	add	r22, r22
 4be:	77 1f       	adc	r23, r23
 4c0:	88 1f       	adc	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	1a f0       	brmi	.+6      	; 0x4cc <__fixunssfsi+0x24>
 4c6:	ba 95       	dec	r27
 4c8:	c9 f7       	brne	.-14     	; 0x4bc <__fixunssfsi+0x14>
 4ca:	14 c0       	rjmp	.+40     	; 0x4f4 <__fixunssfsi+0x4c>
 4cc:	b1 30       	cpi	r27, 0x01	; 1
 4ce:	91 f0       	breq	.+36     	; 0x4f4 <__fixunssfsi+0x4c>
 4d0:	0e 94 0a 03 	call	0x614	; 0x614 <__fp_zero>
 4d4:	b1 e0       	ldi	r27, 0x01	; 1
 4d6:	08 95       	ret
 4d8:	0c 94 0a 03 	jmp	0x614	; 0x614 <__fp_zero>
 4dc:	67 2f       	mov	r22, r23
 4de:	78 2f       	mov	r23, r24
 4e0:	88 27       	eor	r24, r24
 4e2:	b8 5f       	subi	r27, 0xF8	; 248
 4e4:	39 f0       	breq	.+14     	; 0x4f4 <__fixunssfsi+0x4c>
 4e6:	b9 3f       	cpi	r27, 0xF9	; 249
 4e8:	cc f3       	brlt	.-14     	; 0x4dc <__fixunssfsi+0x34>
 4ea:	86 95       	lsr	r24
 4ec:	77 95       	ror	r23
 4ee:	67 95       	ror	r22
 4f0:	b3 95       	inc	r27
 4f2:	d9 f7       	brne	.-10     	; 0x4ea <__fixunssfsi+0x42>
 4f4:	3e f4       	brtc	.+14     	; 0x504 <__fixunssfsi+0x5c>
 4f6:	90 95       	com	r25
 4f8:	80 95       	com	r24
 4fa:	70 95       	com	r23
 4fc:	61 95       	neg	r22
 4fe:	7f 4f       	sbci	r23, 0xFF	; 255
 500:	8f 4f       	sbci	r24, 0xFF	; 255
 502:	9f 4f       	sbci	r25, 0xFF	; 255
 504:	08 95       	ret

00000506 <__floatunsisf>:
 506:	e8 94       	clt
 508:	09 c0       	rjmp	.+18     	; 0x51c <__floatsisf+0x12>

0000050a <__floatsisf>:
 50a:	97 fb       	bst	r25, 7
 50c:	3e f4       	brtc	.+14     	; 0x51c <__floatsisf+0x12>
 50e:	90 95       	com	r25
 510:	80 95       	com	r24
 512:	70 95       	com	r23
 514:	61 95       	neg	r22
 516:	7f 4f       	sbci	r23, 0xFF	; 255
 518:	8f 4f       	sbci	r24, 0xFF	; 255
 51a:	9f 4f       	sbci	r25, 0xFF	; 255
 51c:	99 23       	and	r25, r25
 51e:	a9 f0       	breq	.+42     	; 0x54a <__floatsisf+0x40>
 520:	f9 2f       	mov	r31, r25
 522:	96 e9       	ldi	r25, 0x96	; 150
 524:	bb 27       	eor	r27, r27
 526:	93 95       	inc	r25
 528:	f6 95       	lsr	r31
 52a:	87 95       	ror	r24
 52c:	77 95       	ror	r23
 52e:	67 95       	ror	r22
 530:	b7 95       	ror	r27
 532:	f1 11       	cpse	r31, r1
 534:	f8 cf       	rjmp	.-16     	; 0x526 <__floatsisf+0x1c>
 536:	fa f4       	brpl	.+62     	; 0x576 <__floatsisf+0x6c>
 538:	bb 0f       	add	r27, r27
 53a:	11 f4       	brne	.+4      	; 0x540 <__floatsisf+0x36>
 53c:	60 ff       	sbrs	r22, 0
 53e:	1b c0       	rjmp	.+54     	; 0x576 <__floatsisf+0x6c>
 540:	6f 5f       	subi	r22, 0xFF	; 255
 542:	7f 4f       	sbci	r23, 0xFF	; 255
 544:	8f 4f       	sbci	r24, 0xFF	; 255
 546:	9f 4f       	sbci	r25, 0xFF	; 255
 548:	16 c0       	rjmp	.+44     	; 0x576 <__floatsisf+0x6c>
 54a:	88 23       	and	r24, r24
 54c:	11 f0       	breq	.+4      	; 0x552 <__floatsisf+0x48>
 54e:	96 e9       	ldi	r25, 0x96	; 150
 550:	11 c0       	rjmp	.+34     	; 0x574 <__floatsisf+0x6a>
 552:	77 23       	and	r23, r23
 554:	21 f0       	breq	.+8      	; 0x55e <__floatsisf+0x54>
 556:	9e e8       	ldi	r25, 0x8E	; 142
 558:	87 2f       	mov	r24, r23
 55a:	76 2f       	mov	r23, r22
 55c:	05 c0       	rjmp	.+10     	; 0x568 <__floatsisf+0x5e>
 55e:	66 23       	and	r22, r22
 560:	71 f0       	breq	.+28     	; 0x57e <__floatsisf+0x74>
 562:	96 e8       	ldi	r25, 0x86	; 134
 564:	86 2f       	mov	r24, r22
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	2a f0       	brmi	.+10     	; 0x576 <__floatsisf+0x6c>
 56c:	9a 95       	dec	r25
 56e:	66 0f       	add	r22, r22
 570:	77 1f       	adc	r23, r23
 572:	88 1f       	adc	r24, r24
 574:	da f7       	brpl	.-10     	; 0x56c <__floatsisf+0x62>
 576:	88 0f       	add	r24, r24
 578:	96 95       	lsr	r25
 57a:	87 95       	ror	r24
 57c:	97 f9       	bld	r25, 7
 57e:	08 95       	ret

00000580 <__fp_inf>:
 580:	97 f9       	bld	r25, 7
 582:	9f 67       	ori	r25, 0x7F	; 127
 584:	80 e8       	ldi	r24, 0x80	; 128
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	60 e0       	ldi	r22, 0x00	; 0
 58a:	08 95       	ret

0000058c <__fp_nan>:
 58c:	9f ef       	ldi	r25, 0xFF	; 255
 58e:	80 ec       	ldi	r24, 0xC0	; 192
 590:	08 95       	ret

00000592 <__fp_pscA>:
 592:	00 24       	eor	r0, r0
 594:	0a 94       	dec	r0
 596:	16 16       	cp	r1, r22
 598:	17 06       	cpc	r1, r23
 59a:	18 06       	cpc	r1, r24
 59c:	09 06       	cpc	r0, r25
 59e:	08 95       	ret

000005a0 <__fp_pscB>:
 5a0:	00 24       	eor	r0, r0
 5a2:	0a 94       	dec	r0
 5a4:	12 16       	cp	r1, r18
 5a6:	13 06       	cpc	r1, r19
 5a8:	14 06       	cpc	r1, r20
 5aa:	05 06       	cpc	r0, r21
 5ac:	08 95       	ret

000005ae <__fp_round>:
 5ae:	09 2e       	mov	r0, r25
 5b0:	03 94       	inc	r0
 5b2:	00 0c       	add	r0, r0
 5b4:	11 f4       	brne	.+4      	; 0x5ba <__fp_round+0xc>
 5b6:	88 23       	and	r24, r24
 5b8:	52 f0       	brmi	.+20     	; 0x5ce <__fp_round+0x20>
 5ba:	bb 0f       	add	r27, r27
 5bc:	40 f4       	brcc	.+16     	; 0x5ce <__fp_round+0x20>
 5be:	bf 2b       	or	r27, r31
 5c0:	11 f4       	brne	.+4      	; 0x5c6 <__fp_round+0x18>
 5c2:	60 ff       	sbrs	r22, 0
 5c4:	04 c0       	rjmp	.+8      	; 0x5ce <__fp_round+0x20>
 5c6:	6f 5f       	subi	r22, 0xFF	; 255
 5c8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ca:	8f 4f       	sbci	r24, 0xFF	; 255
 5cc:	9f 4f       	sbci	r25, 0xFF	; 255
 5ce:	08 95       	ret

000005d0 <__fp_split3>:
 5d0:	57 fd       	sbrc	r21, 7
 5d2:	90 58       	subi	r25, 0x80	; 128
 5d4:	44 0f       	add	r20, r20
 5d6:	55 1f       	adc	r21, r21
 5d8:	59 f0       	breq	.+22     	; 0x5f0 <__fp_splitA+0x10>
 5da:	5f 3f       	cpi	r21, 0xFF	; 255
 5dc:	71 f0       	breq	.+28     	; 0x5fa <__fp_splitA+0x1a>
 5de:	47 95       	ror	r20

000005e0 <__fp_splitA>:
 5e0:	88 0f       	add	r24, r24
 5e2:	97 fb       	bst	r25, 7
 5e4:	99 1f       	adc	r25, r25
 5e6:	61 f0       	breq	.+24     	; 0x600 <__fp_splitA+0x20>
 5e8:	9f 3f       	cpi	r25, 0xFF	; 255
 5ea:	79 f0       	breq	.+30     	; 0x60a <__fp_splitA+0x2a>
 5ec:	87 95       	ror	r24
 5ee:	08 95       	ret
 5f0:	12 16       	cp	r1, r18
 5f2:	13 06       	cpc	r1, r19
 5f4:	14 06       	cpc	r1, r20
 5f6:	55 1f       	adc	r21, r21
 5f8:	f2 cf       	rjmp	.-28     	; 0x5de <__fp_split3+0xe>
 5fa:	46 95       	lsr	r20
 5fc:	f1 df       	rcall	.-30     	; 0x5e0 <__fp_splitA>
 5fe:	08 c0       	rjmp	.+16     	; 0x610 <__fp_splitA+0x30>
 600:	16 16       	cp	r1, r22
 602:	17 06       	cpc	r1, r23
 604:	18 06       	cpc	r1, r24
 606:	99 1f       	adc	r25, r25
 608:	f1 cf       	rjmp	.-30     	; 0x5ec <__fp_splitA+0xc>
 60a:	86 95       	lsr	r24
 60c:	71 05       	cpc	r23, r1
 60e:	61 05       	cpc	r22, r1
 610:	08 94       	sec
 612:	08 95       	ret

00000614 <__fp_zero>:
 614:	e8 94       	clt

00000616 <__fp_szero>:
 616:	bb 27       	eor	r27, r27
 618:	66 27       	eor	r22, r22
 61a:	77 27       	eor	r23, r23
 61c:	cb 01       	movw	r24, r22
 61e:	97 f9       	bld	r25, 7
 620:	08 95       	ret

00000622 <_exit>:
 622:	f8 94       	cli

00000624 <__stop_program>:
 624:	ff cf       	rjmp	.-2      	; 0x624 <__stop_program>
